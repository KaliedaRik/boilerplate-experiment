const moment = require('moment');
const restify = require('restify');
const corsMiddleware = require('restify-cors-middleware')

const { getCopy } = require('./copy.js');

const { 
	getServerEnvironmentVariables, 
	verifyToken } = require('./utilities.js');

const { 
	routePutConfirmEmail,
	routePutLogin,
	routePostRecover,
	routePutRecover,
	routePostRegister,
	routePutRegister,
	routeGetRoot,
	routeGetToken,
	routeGetTwofa,
	routePostTwofa,
	routePutTwofa,
	routePutUserAuth,
	routePutUser } = require('./v1-user-router.js');

const { 
	routeDeleteUser,
	routeGetArchive,
	routePostArchive,
	routePutArchive } = require('./v1-archive-router.js');

const { 
	sender,
	_200_OK } = require('./v1-router-utilities.js');

const { getUser } = require('./v1-database.js');


// Setup the server
// ---------------------------------------------------------------------- //

const { 
	defaultLocale,
	localeList,
	port, 
	allowedOrigins,
	whereAmI } = getServerEnvironmentVariables();

const server = restify.createServer();


// Add in some .pre and .use middleware
// ---------------------------------------------------------------------- //

// the inFlight throttle - adding here as may come in useful later
// const ift_options = { 
// 	limit: 600, 
// 	server: server 
// };
// ift_options.res = new errors.InternalServerError();
// server.pre(restify.plugins.inflightRequestThrottle(ift_options));

// again, this looks like it could be useful so sticking it here just in case
// const cpu_options = {
// 	limit: .75,
// 	max: 1,
// 	interval: 250,
// 	halfLife: 500,
// };
// server.pre(restify.plugins.cpuUsageThrottle(cpu_options));

// because people make typing mistakes
server.pre(restify.plugins.pre.dedupeSlashes());

// to make sure curl requests (eg generated by bots) don't make bots cry
server.pre(restify.plugins.pre.userAgentConnection());

// CORS
const cors = corsMiddleware({
	origins: allowedOrigins,
	exposeHeaders: ['User-Key', 'Authorization']
});
server.pre(cors.preflight);
server.use(cors.actual);

// bespoke middleware to gather details of user sending request (part 1) - user key
server.use((req, res, next) => {

	if(req.header('User-Key')){
		req.username = req.header('User-Key');
	}
	next();
});

// use the throttle early in the pipe to stop over-enthusiastic api scrapers
server.use(restify.plugins.throttle({
	burst: 20,			// Max 20 concurrent requests (if tokens)
	rate: 5,			// Steady state: 5 requests in a second
	// ip: true,   		// throttle per IP (have to choose between ip and username - can't have both)
	username: true, 	// throttle per username
}));

// bespoke middleware to gather details of user sending request (part 2) - user objects
server.use((req, res, next) => {

	req.user = false;
	req.secrets = false;

	if(req.username){
		getUser({key: req.username})
		.then((u) => {

			if(u){
				if(u.user){
					req.user = u.user;
				}
				if(u.secrets){
					req.secrets = u.secrets;
				}
			}
			next();
		})
		.catch((err) => next());
	}
	else next();
});

// bespoke middleware to extract the request token
server.use((req, res, next) => {

	let headerCheck, checkArray;

	req.token = false;

	headerCheck = req.header('Authorization');
	if(headerCheck){
		checkArray = headerCheck.split(' ');
		if(checkArray && checkArray.length === 2 && checkArray[0] === 'Bearer'){
			req.token = checkArray[1]
		}
	}
	next();
});

// bespoke middleware to check JWT authentication - both Authorization and User-Key headers required for verification
server.use((req, res, next) => {

	req.verifiedToken = false;

	if(req.token && req.secrets && req.secrets.tokenSecret){
		verifyToken(req.token, req.secrets.tokenSecret)
		.then((t) => {
			req.verifiedToken = t;
			next();
		})
		.catch((err) => next());
	}
	else next();
});

// essential!
server.use(restify.plugins.bodyParser({
	maxBodySize: 0,
	mapParams: true,
	mapFiles: false,
	overrideParams: false,
	keepExtensions: false,
	multiples: true,
	rejectUnknown: true,
	requestBodyOnGet: false,
	reviver: undefined,
	maxFieldsSize: 2 * 1024 * 1024
}));

// bespoke middleware to prepare localized response messages
server.use((req, res, next) => {

	let localeCheck, 
		locale = defaultLocale;

	if(req.header('Accept-Language')){
		localeCheck = req.header('Accept-Language');
	}
	else if(req.body && req.body.locale){
		localeCheck = req.body.locale;
	}

	if(localeList.indexOf(localeCheck) >= 0){
		locale = localeCheck;
	}

	req.localeCopy = getCopy('index', locale, defaultLocale);
	res.header('Content-Language', locale);
	next();
});

// useful - clients should always be encouraged to set the gzip header
// - accept-encoding: gzip
server.use(restify.plugins.gzipResponse());


// User management endpoints
// ---------------------------------------------------------------------- //

// default endpoint
server.get('/', (req, res, next) => {

	if(req.verifiedToken){
		sender(req, res, _200_OK, '102:OK_AUTHORIZED');
	}
	else{
		sender(req, res, _200_OK, '101:OK_BASIC');
	}
	return next();
});

// archive endpoints
server.get('/archive', (req, res, next) => routeGetArchive(req, res, next));
server.post('/archive', (req, res, next) => routePostArchive(req, res, next));
server.put('/archive', (req, res, next) => routePutArchive(req, res, next));
server.del('/user', (req, res, next) => routeDeleteUser(req, res, next));

// user endpoints
server.put('/confirm-email', (req, res, next) => routePutConfirmEmail(req, res, next));
server.put('/login', (req, res, next) => routePutLogin(req, res, next));
server.post('/recover', (req, res, next) => routePostRecover(req, res, next));
server.put('/recover', (req, res, next) => routePutRecover(req, res, next));
server.post('/register', (req, res, next) => routePostRegister(req, res, next));
server.put('/register', (req, res, next) => routePutRegister(req, res, next));
server.get('/token', (req, res, next) => routeGetToken(req, res, next));
server.get('/twofa', (req, res, next) => routeGetTwofa(req, res, next));
server.post('/twofa', (req, res, next) => routePostTwofa(req, res, next));
server.put('/twofa', (req, res, next) => routePutTwofa(req, res, next));
server.put('/user', (req, res, next) => routePutUser(req, res, next));
server.put('/user-auth', (req, res, next) => routePutUserAuth(req, res, next));


// Start the server running
// ---------------------------------------------------------------------- //

server.listen(port, function() {
	console.log(`${server.name} is listening at ${server.url} in ${whereAmI}`);
});
